{"version":3,"file":"css-vars-ponyfill.min.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/parse-vars.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.8.0\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map((function(x) {\n        return null;\n    }));\n    function isValidCss() {\n        var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        var isHTML = cssText.trim().charAt(0) === \"<\";\n        return !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    var parser = document.createElement(\"a\");\n    urlArray.forEach((function(url, i) {\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isIElte9 = Boolean(document.all && !window.atob);\n        var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n        if (isIElte9CORS) {\n            var isSameProtocol = parser.protocol === location.protocol;\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest;\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    if (isValidCss(xdr.responseText)) {\n                        onSuccess(xdr.responseText, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout((function() {\n                    xdr.send();\n                }), 0);\n            } else {\n                console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest;\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 && isValidCss(xhr.responseText)) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    }));\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {boolean}  [options.skipDisabled=true] Determines if disabled\n *                   stylesheets will be skipped while collecting CSS data.\n * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement : document,\n *     include     : 'style,link[rel=\"stylesheet\"]',\n *     exclude     : '[href=\"skip.css\"]',\n *     filter      : /red/,\n *     skipDisabled: true,\n *     useCSSOM    : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        skipDisabled: options.skipDisabled !== false,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter((function(node) {\n        return !matchesSelector(node, settings.exclude);\n    }));\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map((function(x) {\n        return null;\n    }));\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, (function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach((function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                }));\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        }));\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter((function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        }));\n        importData.urls = importData.rules.map((function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        }));\n        importData.absoluteUrls = importData.urls.map((function(url) {\n            return getFullUrl(url, baseUrl);\n        }));\n        importData.absoluteRules = importData.rules.map((function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        }));\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach((function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    }));\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach((function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    }));\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach((function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase().indexOf(\"stylesheet\") !== -1;\n            var isSkip = settings.skipDisabled === false ? false : node.disabled;\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink && !isSkip) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle && !isSkip) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {\n                        return rule.cssText;\n                    })).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        }));\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url, base) {\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base || document.baseURI || (document.querySelector(\"base\") || {}).href || location.href;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced from 'balanced-match';\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string}  css The CSS stringt to be converted to an AST\n * @param {object}  [options] Options object\n * @param {boolean} [options.preserveStatic=true] Determines if CSS\n *                  declarations that do not reference a custom property will\n *                  be preserved in the transformed CSS\n * @param {boolean} [options.removeComments=false] Remove comments from returned\n *                  object\n * @returns {object}\n */\nfunction parseCss(css, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        removeComments: false\n    };\n    const settings = Object.assign({}, defaults, options);\n    const errors   = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function open() {\n        return match(/^{\\s*/);\n    }\n\n    function close() {\n        return match(/^}/);\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') {\n            return;\n        }\n\n        let i = 2;\n\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) {\n            i++;\n        }\n\n        if (!css[i]) {\n            return error('end of comment is missing');\n        }\n\n        const str = css.slice(2, i);\n\n        css = css.slice(i + 2);\n\n        return {\n            type   : 'comment',\n            comment: str\n        };\n    }\n\n    function comments() {\n        const cmnts = [];\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n\n        return settings.removeComments ? [] : cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m) {\n            return m[0]\n                .trim() // remove all comments from selectors\n                .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n                .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                    return m.replace(/,/g, '\\u200C');\n                })\n                .split(/\\s*(?![^(]*\\)),\\s*/)\n                .map(function(s) {\n                    return s.replace(/\\u200C/g, ',');\n                });\n        }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        // Nested @ rule(s)\n        if (css[0] === '@') {\n            return at_rule();\n        }\n\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n        if (!prop) {\n            return;\n        }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) {\n            return error('property missing \\':\\'');\n        }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        const ret = {\n            type    : 'declaration',\n            property: prop.replace(comment_regexp, ''),\n            value   : val ? val[0].replace(comment_regexp, '').trim() : ''\n        };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n\n    function declarations() {\n        if (!open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let d;\n        let decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) {\n            return {\n                type        : 'keyframe',\n                values      : vals,\n                declarations: declarations()\n            };\n        }\n    }\n\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) {\n            return;\n        }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n\n        const name = m[1];\n\n        if (!open()) {\n            return error('@keyframes missing \\'{\\'');\n        }\n\n        let frame;\n        let frames = comments();\n\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) {\n            return error('@keyframes missing \\'}\\'');\n        }\n\n        return {\n            type     : 'keyframes',\n            name     : name,\n            vendor   : vendor,\n            keyframes: frames\n        };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_page_margin_box() {\n        const m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\\s*/);\n        if (m) {\n            const name = `${m[1]}-${m[2]}` + (m[3] ? `-${m[3]}` : '');\n            return { type: 'page-margin-box', name, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media([^{]+)*/);\n        if (m) { return { type: 'media', media: (m[1] || '').trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n\n        if (css[0] === '@') {\n            const ret =\n                at_x() ||\n                at_fontface() ||\n                at_media() ||\n                at_keyframes() ||\n                at_supports() ||\n                at_document() ||\n                at_custom_m() ||\n                at_host() ||\n                at_page() ||\n                at_page_margin_box(); // Must be last\n\n            if (ret && !settings.preserveStatic) {\n                let hasVarFunc = false;\n\n                // @page, @font-face\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some(decl => /var\\(/.test(decl.value));\n                }\n                // @keyframes, @media, @supports, etc.\n                else {\n                    const arr = ret.keyframes || ret.rules || [];\n\n                    hasVarFunc = arr.some(obj => (obj.declarations || []).some(decl => /var\\(/.test(decl.value)));\n                }\n\n                return hasVarFunc ? ret : {};\n            }\n\n            return ret;\n        }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        if (!settings.preserveStatic) {\n            const balancedMatch = balanced('{', '}', css);\n\n            // Skip rulset if it does not contain a root/host variable\n            // declaration or a variable function value\n            if (balancedMatch) {\n                const hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch.pre) && /--\\S*\\s*:/.test(balancedMatch.body);\n                const hasVarFunc = /var\\(/.test(balancedMatch.body);\n\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch.end + 1);\n\n                    return {};\n                }\n            }\n        }\n\n        const sel   = selector() || [];\n        const decls = settings.preserveStatic ? declarations() : declarations().filter(decl => {\n            const hasVarDecl = sel.some(s => /:(?:root|host)(?![.:#(])/.test(s)) && /^--\\S/.test(decl.property);\n            const hasVarFunc = /var\\(/.test(decl.value);\n\n            return hasVarDecl || hasVarFunc;\n        });\n\n        if (!sel.length) {\n            error('selector missing');\n        }\n\n        return {\n            type        : 'rule',\n            selectors   : sel,\n            declarations: decls\n        };\n    }\n\n    function rules(core) {\n        if (!core && !open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let node;\n        let rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return rules;\n    }\n\n    return {\n        type: 'stylesheet',\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\n\n// Exports\n// =============================================================================\nexport default parseCss;\n","// Dependencies\n// =============================================================================\nimport parseCss from './parse-css';\n\n\n// Functions\n// =============================================================================\n/**\n * Description\n *\n * @param {object|string} cssData CSS data to parse\n * @param {object} [options] Options object\n * @param {object} [options.store={}] CSS variable definitions to include during\n *     transformation. Can be used to add new override exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *     warning. Passes 1) warningMessage as an argument.\n * @returns {object}\n */\nfunction parseVars(cssData, options = {}) {\n    const defaults = {\n        parseHost: false,\n        store    : {},\n        onWarning() {}\n    };\n    const settings           = Object.assign({}, defaults, options);\n    const reVarDeclSelectors = new RegExp(`:${ settings.parseHost ? 'host' : 'root' }$`);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Define variables\n    cssData.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule' || !rule.selectors.some(s => reVarDeclSelectors.test(s))) {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop  = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf('--') === 0) {\n                settings.store[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n    });\n\n    // Return variable store\n    return settings.store;\n}\n\n\n// Exports\n// =============================================================================\nexport default parseVars;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        'page-margin-box'(node) {\n            return '@' + node.name + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssData CSS text or AST\n * @param {object}   [options] Options object\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformCss(cssData, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        preserveVars  : false,\n        variables     : {},\n        onWarning() {}\n    };\n    const settings = Object.assign({}, defaults, options);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Resolve variables\n    walkCss(cssData.stylesheet, function(declarations, node) {\n        for (let i = 0; i < declarations.length; i++) {\n            const decl  = declarations[i];\n            const type  = decl.type;\n            const prop  = decl.property;\n            const value = decl.value;\n\n            // Skip comments\n            if (type !== 'declaration') {\n                continue;\n            }\n\n            // Remove custom property declarations\n            if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                declarations.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            // Transform custom property functions\n            if (value.indexOf(VAR_FUNC_IDENTIFIER + '(') !== -1) {\n                let resolvedValue = resolveValue(value, settings);\n\n                if (resolvedValue !== decl.value) {\n                    // Fix nested calc\n                    resolvedValue = fixNestedCalc(resolvedValue);\n\n                    // Overwrite value\n                    if (!settings.preserveVars) {\n                        decl.value = resolvedValue;\n                    }\n                    // Insert new rule with resolved value\n                    else {\n                        declarations.splice(i, 0, {\n                            type    : type,\n                            property: prop,\n                            value   : resolvedValue\n                        });\n\n                        // Skip ahead of preserved declaration\n                        i++;\n                    }\n                }\n            }\n        }\n    });\n\n    // Return CSS string\n    return stringifyCss(cssData);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {value} string\n */\nfunction fixNestedCalc(value) {\n    const reCalcVal = /calc\\(([^)]+)\\)/g;\n\n    (value.match(reCalcVal) || []).forEach(match => {\n        const newVal = `calc${match.split('calc').join('')}`;\n        value = value.replace(match, newVal);\n    });\n\n    return value;\n}\n\n/**\n * Resolves CSS var() function(s) with `settings.variables` or fallback\n * value(s). Returns original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} settings Settings object passed from transformCss()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a `settings.variables` or fallback value.\n *                 Allows restoring original var() function from recursive\n *                 resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to\n *                  `settings.variables` or fallback value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, settings = {}, __recursiveFallback) {\n    if (value.indexOf('var(') === -1) {\n        return value;\n    }\n\n    const valueData = balanced('(', ')', value);\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => obj['--x'] or obj['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when obj['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0].replace(/[\\s\\n\\t]/g, '');\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    // No balanced brace data\n    if (!valueData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    // Balanced brace data is var() function\n    else if (valueData.pre.slice(-3) === 'var') {\n        const isEmptyVarFunc = valueData.body.trim().length === 0;\n\n        if (isEmptyVarFunc) {\n            settings.onWarning('var() must contain a non-whitespace string');\n\n            return value;\n        }\n        else {\n            return (\n                valueData.pre.slice(0,-3)\n                + resolveFunc(valueData.body)\n                + resolveValue(valueData.post, settings)\n            );\n        }\n    }\n    // Balanced brace data is NOT var() function\n    else {\n        return (\n            valueData.pre\n            + `(${resolveValue(valueData.body, settings)})`\n            + resolveValue(valueData.post, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformCss;\n","// Dependencies\n// =============================================================================\nimport getCssData   from 'get-css-data';\nimport parseCss     from './parse-css';\nimport parseVars    from './parse-vars';\nimport stringifyCss from './stringify-css';\nimport transformCss from './transform-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst counters = {\n    group: 0,\n    job  : 0\n};\nconst defaults = {\n    // Targets\n    rootElement   : isBrowser ? document : null,\n    shadowDOM     : false,\n    // Sources\n    include       : 'style,link[rel=stylesheet]',\n    exclude       : '',\n    variables     : {},    // cssVars, transformCss\n    // Options\n    onlyLegacy    : true,  // cssVars\n    preserveStatic: true,  // parseCSS\n    preserveVars  : false, // transformCss\n    silent        : false, // cssVars\n    updateDOM     : true,  // cssVars\n    updateURLs    : true,  // cssVars\n    watch         : null,  // cssVars\n    // Callbacks\n    onBeforeSend() {},     // cssVars\n    onError() {},          // cssVars\n    onWarning() {},        // transformCss\n    onSuccess() {},        // cssVars\n    onComplete() {},       // cssVars\n    onFinally() {}         // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes\n    // Ex: @keyframes & @-VENDOR-keyframes\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS media queries\n    // Ex: @media (min-width: 640px) { ... }\n    cssMediaQueries: /@media[^{]+\\{([\\s\\S]+?})\\s*}/g,\n    // CSS Urls\n    // Ex: url('path/to/file')\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS root/host rules\n    // Ex: :root { ... } or :host { ... }\n    cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^}]*})/g,\n    // CSS variable declarations (e.g. --color: red;)\n    cssVarDecls: /(?:[\\s;]*)(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*);/g,\n    // CSS variable function (e.g. var(--color))\n    cssVarFunc: /var\\(\\s*--[\\w-]/,\n    // CSS variable root/host declarations and var() function values\n    cssVars: /(?:(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\nconst variableStore = {\n    // Parsed DOM values (from <link> and <style> nodes)\n    dom : {},\n    // Temporary storage for each job\n    job : {},\n    // Persisted options.variables values\n    user: {}\n};\n\n// Flag used to prevent successive ponyfill calls from stacking\nlet cssVarsIsRunning = false;\n\n// Mutation observer reference created via options.watch\nlet cssVarsObserver = null;\n\n// Count used to detect manual removal of [data-cssvars=\"src\"] nodes\nlet cssVarsSrcNodeCount = 0;\n\n// Debounce timer used with options.watch\nlet debounceTimer = null;\n\n// Flag used to indicate if document-level custom property values have been\n// parsed, stored, and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) an array of\n *                   output <style> node references that have been appended to\n *                   the DOM, 3) an object containing all custom properies names\n *                   and values, and 4) the ponyfill execution time in\n *                   milliseconds.\n * @param {function} [options.onFinally] Callback in modern and legacy browsers\n *                   after the ponyfill has finished all tasks. Passes 1) a\n *                   boolean indicating if the last ponyfill call resulted in a\n *                   style change, 2) a boolean indicating if the current\n *                   browser provides native support for CSS custom properties,\n *                   and 3) the ponyfill execution time in milliseconds.\n * @example\n *\n *   cssVars({\n *     rootElement   : document,\n *     shadowDOM     : false,\n *     include       : 'style,link[rel=\"stylesheet\"]',\n *     exclude       : '',\n *     variables     : {},\n *     onlyLegacy    : true,\n *     preserveStatic: true,\n *     preserveVars  : false,\n *     silent        : false,\n *     updateDOM     : true,\n *     updateURLs    : true,\n *     watch         : false,\n *     onBeforeSend(xhr, node, url) {},\n *     onError(message, node, xhr, url) {},\n *     onWarning(message) {},\n *     onSuccess(cssText, node, url) {},\n *     onComplete(cssText, styleNode, cssVariables, benchmark) {},\n *     onFinally(hasChanged, hasNativeSupport, benchmark)\n *   });\n */\nfunction cssVars(options = {}) {\n    const msgPrefix = 'cssVars(): ';\n    const settings  = Object.assign({}, defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.error(`${msgPrefix}${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.warn(`${msgPrefix}${message}`);\n        }\n\n        settings.onWarning(message);\n    }\n\n    function handleFinally(hasChanged) {\n        settings.onFinally(\n            Boolean(hasChanged),\n            isNativeSupport,\n            getTimeStamp() - settings.__benchmark\n        );\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Add / recreate MutationObserver\n    if (settings.watch) {\n        settings.watch = defaults.watch;\n        addMutationObserver(settings);\n        cssVars(settings);\n        return;\n    }\n    // Disconnect existing MutationObserver\n    else if (settings.watch === false && cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // If benchmark key is not availalbe, this is a non-recursive call\n    if (!settings.__benchmark) {\n        // Check flag and debounce to prevent successive call from stacking\n        if (cssVarsIsRunning === settings.rootElement) {\n            cssVarsDebounced(options);\n            return;\n        }\n\n        // Store benchmark start time\n        settings.__benchmark = getTimeStamp();\n\n        // Exclude previously processed elements\n        settings.exclude = [\n            // 1. When the ponyfill is called by the MutationObserver, all\n            //    previously processed nodes are exluded except those that have\n            //    had their out/skip/src values cleared by the MutationObserver.\n            // 2. When the ponyfill is called directly, only output nodes are\n            //    excluded. This allows the ponyfill to update skip/src nodes\n            //    after a previously processed link/style node has been removed.\n            cssVarsObserver ? '[data-cssvars]:not([data-cssvars=\"\"])' : '[data-cssvars=\"out\"]',\n            settings.exclude\n        ].filter(selector => selector).join(',');\n\n        // Fix malformed custom property names (e.g. \"color\" or \"-color\")\n        settings.variables = fixVarNames(settings.variables);\n\n        // Direct call preparation (i.e. non-MutationObserver call)\n        if (!cssVarsObserver) {\n            const outNodes = Array.apply(null, settings.rootElement.querySelectorAll('[data-cssvars=\"out\"]'));\n\n            // Remove orphaned output nodes\n            outNodes.forEach(outNode => {\n                const dataGroup = outNode.getAttribute('data-cssvars-group');\n                const srcNode   = dataGroup ? settings.rootElement.querySelector(`[data-cssvars=\"src\"][data-cssvars-group=\"${dataGroup}\"]`) : null;\n\n                if (!srcNode) {\n                    outNode.parentNode.removeChild(outNode);\n                }\n            });\n\n            // Handle removed source nodes\n            if (cssVarsSrcNodeCount) {\n                const srcNodes = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])');\n\n                if (srcNodes.length < cssVarsSrcNodeCount) {\n                    // Update source node count\n                    cssVarsSrcNodeCount = srcNodes.length;\n\n                    // Reset variableStore\n                    variableStore.dom = {};\n                }\n            }\n        }\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            let hasVarChange = false;\n\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    const varValue = settings.variables[key];\n\n                    hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);\n                    targetElm.style.setProperty(key, varValue);\n                });\n            }\n\n            handleFinally(hasVarChange);\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement : defaults.rootElement,\n                include     : defaults.include,\n                exclude     : settings.exclude,\n                skipDisabled: false,\n                onSuccess(cssText, node, url) {\n                    cssText = cssText\n                        .replace(regex.cssComments, '')\n                        .replace(regex.cssMediaQueries, '');\n\n                    cssText = (cssText.match(regex.cssVarDeclRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssText || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Parse variables and store in variableStore. This step\n                    // ensures that variableStore contains all document-level\n                    // custom property values for subsequent ponyfill calls.\n                    parseVars(cssText, {\n                        store    : variableStore.dom,\n                        onWarning: handleWarning\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variableStore will\n                    // be used to transform values in shadow host/root elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            // Set flag to prevent successive call from stacking. Using the\n            // rootElement insead of `true` allows simultaneous ponyfill calls\n            // using different rootElement values (e.g. documetn and one-or-more\n            // shadowDOM nodes).\n            cssVarsIsRunning = settings.rootElement;\n\n            getCssData({\n                rootElement : settings.rootElement,\n                include     : settings.include,\n                exclude     : settings.exclude,\n                skipDisabled: false,\n                onBeforeSend: settings.onBeforeSend,\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    // Use callback return value if provided (skip CSS if false)\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        cssText = fixRelativeCssUrls(cssText, url);\n                    }\n\n                    return cssText;\n                },\n                onComplete(cssText, cssArray, nodeArray = []) {\n                    const currentVars = Object.assign({}, variableStore.dom, variableStore.user);\n\n                    let hasVarChange = false;\n\n                    // Reset temporary variable store\n                    variableStore.job = {};\n\n                    // Parse CSS and variables\n                    nodeArray.forEach((node, i) => {\n                        const nodeCSS = cssArray[i];\n\n                        // Only process CSS contains a custom property\n                        // declarations or function\n                        if (regex.cssVars.test(nodeCSS)) {\n                            try {\n                                const cssTree = parseCss(nodeCSS, {\n                                    preserveStatic: settings.preserveStatic,\n                                    removeComments: true\n                                });\n\n                                // Parse variables\n                                parseVars(cssTree, {\n                                    parseHost: Boolean(settings.rootElement.host),\n                                    store    : variableStore.dom,\n                                    onWarning: handleWarning\n                                });\n\n                                // Cache data\n                                node.__cssVars = { tree: cssTree };\n                            }\n                            catch(err) {\n                                handleError(err.message, node);\n                            }\n                        }\n                    });\n\n                    // Merge DOM values with job values\n                    Object.assign(variableStore.job, variableStore.dom);\n\n                    if (settings.updateDOM) {\n                        // Persist user values\n                        Object.assign(variableStore.user, settings.variables);\n\n                        // Merge persisted user values with job values\n                        Object.assign(variableStore.job, variableStore.user);\n                    }\n                    else {\n                        // Merge persisted and non-persisted user values with job values\n                        Object.assign(variableStore.job, variableStore.user, settings.variables);\n\n                        // Update currentVars with non-persisted user values\n                        Object.assign(currentVars, settings.variables);\n                    }\n\n                    // Detect new variable declaration or changed value\n                    hasVarChange =\n                        // Ponyfill has been called before with updateDOM\n                        counters.job > 0 &&\n                        // New/Change\n                        Boolean(\n                            // New declaration\n                            (Object.keys(variableStore.job).length > Object.keys(currentVars).length) ||\n                            // Changed declaration value\n                            Boolean(\n                                // Previous declarations exist\n                                Object.keys(currentVars).length &&\n                                // At least one job value does has changed\n                                Object.keys(variableStore.job).some(key => variableStore.job[key] !== currentVars[key])\n                            )\n                        );\n\n                    // New variable declaration or modified value detected\n                    if (hasVarChange) {\n                        resetCssNodes(settings.rootElement);\n                        cssVars(settings);\n                    }\n                    // No variable changes detected\n                    else {\n                        const outCssArray  = [];\n                        const outNodeArray = [];\n\n                        let hasKeyframesWithVars = false;\n\n                        // Increment job\n                        if (settings.updateDOM) {\n                            counters.job++;\n                        }\n\n                        nodeArray.forEach((node, i) => {\n                            let isSkip = !node.__cssVars;\n\n                            if (node.__cssVars) {\n                                try {\n                                    transformCss(node.__cssVars.tree, Object.assign({}, settings, {\n                                        variables: variableStore.job,\n                                        onWarning: handleWarning\n                                    }));\n\n                                    const outCss = stringifyCss(node.__cssVars.tree);\n\n                                    if (settings.updateDOM) {\n                                        const nodeCSS       = cssArray[i];\n                                        const hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);\n\n                                        if (!node.getAttribute('data-cssvars')) {\n                                            node.setAttribute('data-cssvars', 'src');\n                                        }\n\n                                        if (outCss.length && hasCSSVarFunc) {\n                                            const dataGroup      = node.getAttribute('data-cssvars-group') || ++counters.group;\n                                            const outCssNoSpaces = outCss.replace(/\\s/g,'');\n                                            const outNode        = settings.rootElement.querySelector(`[data-cssvars=\"out\"][data-cssvars-group=\"${dataGroup}\"]`) || document.createElement('style');\n\n                                            hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);\n\n                                            // Disable source stylesheet\n                                            if (settings.preserveStatic) {\n                                                node.sheet.disabled = true;\n                                            }\n\n                                            if (!outNode.hasAttribute('data-cssvars')) {\n                                                outNode.setAttribute('data-cssvars', 'out');\n                                            }\n\n                                            // Non-transformed CSS\n                                            if (outCssNoSpaces === node.textContent.replace(/\\s/g,'')) {\n                                                isSkip = true;\n\n                                                if (outNode && outNode.parentNode) {\n                                                    node.removeAttribute('data-cssvars-group');\n                                                    outNode.parentNode.removeChild(outNode);\n                                                }\n                                            }\n                                            // Transformed CSS\n                                            else if (outCssNoSpaces !== outNode.textContent.replace(/\\s/g,'')) {\n                                                [node, outNode].forEach(n => {\n                                                    n.setAttribute('data-cssvars-job', counters.job);\n                                                    n.setAttribute('data-cssvars-group', dataGroup);\n                                                });\n                                                outNode.textContent = outCss;\n                                                outCssArray.push(outCss);\n                                                outNodeArray.push(outNode);\n\n                                                if (!outNode.parentNode) {\n                                                    node.parentNode.insertBefore(outNode, node.nextSibling);\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (node.textContent.replace(/\\s/g,'') !== outCss) {\n                                            outCssArray.push(outCss);\n                                        }\n                                    }\n                                }\n                                catch(err) {\n                                    handleError(err.message, node);\n                                }\n                            }\n\n                            if (isSkip) {\n                                node.setAttribute('data-cssvars', 'skip');\n                            }\n\n                            if (!node.hasAttribute('data-cssvars-job')) {\n                                node.setAttribute('data-cssvars-job', counters.job);\n                            }\n                        });\n\n                        // Update source node count\n                        cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])').length;\n\n                        // Process shadow DOM\n                        if (settings.shadowDOM) {\n                            const elms = [\n                                settings.rootElement,\n                                ...settings.rootElement.querySelectorAll('*')\n                            ];\n\n                            // Iterates over all elements in rootElement and calls\n                            // cssVars on each shadowRoot, passing document-level\n                            // custom properties as options.variables.\n                            for (let i = 0, elm; (elm = elms[i]); ++i) {\n                                if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                    const shadowSettings = Object.assign({}, settings, {\n                                        rootElement: elm.shadowRoot\n                                    });\n\n                                    cssVars(shadowSettings);\n                                }\n                            }\n                        }\n\n                        // Fix keyframes\n                        if (settings.updateDOM && hasKeyframesWithVars) {\n                            fixKeyframes(settings.rootElement);\n                        }\n\n                        // Reset running flag. Must be done before onComplete\n                        // callback to avoid a callback error preventing the\n                        // flag from being reset after the callback.\n                        cssVarsIsRunning = false;\n\n                        // Callbacks\n                        settings.onComplete(\n                            outCssArray.join(''),\n                            outNodeArray,\n                            JSON.parse(JSON.stringify(variableStore.job)),\n                            getTimeStamp() - settings.__benchmark\n                        );\n\n                        handleFinally(outNodeArray.length);\n                    }\n                }\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n// Ponyfill reset\ncssVars.reset = function() {\n    // Reset counters\n    counters.job = 0;\n    counters.group = 0;\n\n    // Reset running flag\n    cssVarsIsRunning = false;\n\n    // Disconnect MutationObserver\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // Reset source node count\n    cssVarsSrcNodeCount = 0;\n\n    // Reset debounce timer\n    debounceTimer = null;\n\n    // Reset shadowDOM ready flag\n    isShadowDOMReady = false;\n\n    // Reset variable storage\n    for (const prop in variableStore) {\n        variableStore[prop] = {};\n    }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n */\nfunction addMutationObserver(settings) {\n    function isDisabled(node) {\n        const isDisabledAttr  = node.hasAttribute('disabled');\n        const isDisabledSheet = (node.sheet || {}).disabled;\n\n        return isDisabledAttr || isDisabledSheet;\n    }\n    function isLink(node) {\n        const isStylesheet = node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n\n        return isStylesheet && !isDisabled(node);\n    }\n    function isStyle(node) {\n        return node.tagName === 'STYLE' && !isDisabled(node);\n    }\n    function isValidAddMutation(mutationNodes) {\n        return Array.apply(null, mutationNodes).some(node => {\n            const isElm           = node.nodeType === 1;\n            const hasAttr         = isElm && node.hasAttribute('data-cssvars');\n            const isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);\n            const isValid         = !hasAttr && (isLink(node) || isStyleWithVars);\n\n            return isValid;\n        });\n    }\n    function isValidRemoveMutation(mutationNodes) {\n        return Array.apply(null, mutationNodes).some(node => {\n            const isElm     = node.nodeType === 1;\n            const isOutNode = isElm && node.getAttribute('data-cssvars') === 'out';\n            const isSrcNode = isElm && node.getAttribute('data-cssvars') === 'src';\n            const isValid   = isSrcNode;\n\n            if (isSrcNode || isOutNode) {\n                const dataGroup  = node.getAttribute('data-cssvars-group');\n                const orphanNode = settings.rootElement.querySelector(`[data-cssvars-group=\"${dataGroup}\"]`);\n\n                if (isSrcNode) {\n                    resetCssNodes(settings.rootElement);\n                    variableStore.dom = {};\n                }\n\n                if (orphanNode) {\n                    orphanNode.parentNode.removeChild(orphanNode);\n                }\n            }\n\n            return isValid;\n        });\n    }\n\n    if (!window.MutationObserver) {\n        return;\n    }\n\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    cssVarsObserver = new MutationObserver(function(mutations) {\n        const hasValidMutation = mutations.some((mutation) => {\n            let isValid = false;\n\n            if (mutation.type === 'attributes') {\n                isValid = isLink(mutation.target);\n            }\n            else if (mutation.type === 'childList') {\n                isValid = isValidAddMutation(mutation.addedNodes) || isValidRemoveMutation(mutation.removedNodes);\n            }\n\n            return isValid;\n        });\n\n        if (hasValidMutation) {\n            cssVars(settings);\n        }\n    });\n\n    cssVarsObserver.observe(document.documentElement, {\n        attributes     : true,\n        attributeFilter: ['disabled', 'href'],\n        childList      : true,\n        subtree        : true\n    });\n}\n\n/**\n * Debounces cssVars() calls\n *\n * @param {object} settings\n */\nfunction cssVarsDebounced(settings, delay = 100) {\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(function() {\n        settings.__benchmark = null;\n        cssVars(settings);\n    }, delay);\n}\n\n/**\n * Fixes issue with keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n *\n * @param {object} rootElement\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Convert relative CSS url(...) values to absolute based on baseUrl\n *\n * @param {string} cssText\n * @param {string} baseUrl\n * @returns {string}\n */\nfunction fixRelativeCssUrls(cssText, baseUrl) {\n    const cssUrls = cssText\n        // Remove comments\n        .replace(regex.cssComments, '')\n        // Match url(...) values\n        .match(regex.cssUrls) || [];\n\n    cssUrls.forEach(cssUrl => {\n        const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n        const newUrl = getFullUrl(oldUrl, baseUrl);\n\n        cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n    });\n\n    return cssText;\n}\n\n/**\n * Converts all object property names to leading '--' style\n *\n * @param {object} varObj Object containing CSS custom property name:value pairs\n * @returns {object}\n */\nfunction fixVarNames(varObj = {}) {\n    const reLeadingHyphens = /^-{2}/;\n\n    return Object.keys(varObj).reduce((obj, value) => {\n        const key = reLeadingHyphens.test(value) ? value : `--${value.replace(/^-+/, '')}`;\n\n        obj[key] = varObj[value];\n\n        return obj;\n    }, {});\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param   {string} url\n * @param   {string} [base=location.href]\n * @returns {string}\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n/**\n * Returns a time stamp in milliseconds\n *\n * @returns {number}\n */\nfunction getTimeStamp() {\n    return isBrowser && (window.performance || {}).now ? window.performance.now() : new Date().getTime();\n}\n\nfunction resetCssNodes(rootElement) {\n    const resetNodes = Array.apply(null, rootElement.querySelectorAll('[data-cssvars=\"skip\"],[data-cssvars=\"src\"]'));\n\n    resetNodes.forEach(node => node.setAttribute('data-cssvars', ''));\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","isValidCss","cssText","isHTML","trim","charAt","xhr","urlIndex","responseText","returnVal","indexOf","parser","document","createElement","forEach","url","i","setAttribute","href","String","Boolean","all","window","atob","host","split","location","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","warn","concat","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","rootElement","include","exclude","filter","skipDisabled","useCSSOM","sourceNodes","querySelectorAll","node","elm","selector","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","cssArray","handleComplete","join","handleSuccess","cssIndex","sourceUrl","resolveImports","baseUrl","callbackFn","__errorData","__errorRules","importData","parseImportData","rules","absoluteUrls","responseImportData","rule","replace","absoluteRules","push","responseArray","importText","resolvedCssText","errorData","data","test","ignoreRules","match","getFullUrl","oldUrl","newUrl","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isSkip","disabled","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","baseURI","querySelector","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","parseCss","css","defaults","preserveStatic","removeComments","_extends","errors","error","msg","Error","re","exec","close","whitespace","comment","type","comments","c","cmnts","s","declaration","at_rule","comment_regexp","prop","val","ret","property","value","declarations","decls","keyframe","vals","values","at_keyframes","vendor","frame","name","frames","keyframes","at_page","selectors","at_page_margin_box","at_fontface","at_supports","supports","at_host","at_media","media","at_custom_m","at_document","at_x","hasVarFunc","some","decl","obj","balancedMatch","hasVarDecl","sel","core","stylesheet","parseVars","cssData","parseHost","store","onWarning","reVarDeclSelectors","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","n","txt","walkCss","fn","transformCss","preserveVars","variables","VAR_FUNC_IDENTIFIER","resolvedValue","resolveValue","fixNestedCalc","splice","newVal","__recursiveFallback","valueData","resolveFunc","fallback","Object","hasOwnProperty","replacement","unresolvedFallback","isEmptyVarFunc","isBrowser","isNativeSupport","CSS","counters","group","job","shadowDOM","onlyLegacy","silent","updateDOM","updateURLs","watch","onFinally","cssComments","cssKeyframes","cssMediaQueries","cssUrls","cssVarDeclRules","cssVarDecls","cssVarFunc","cssVars","variableStore","dom","user","cssVarsIsRunning","cssVarsObserver","cssVarsSrcNodeCount","debounceTimer","isShadowDOMReady","msgPrefix","handleError","message","sourceNode","handleWarning","handleFinally","hasChanged","getTimeStamp","__benchmark","addMutationObserver","disconnect","cssVarsDebounced","fixVarNames","outNodes","outNode","dataGroup","parentNode","removeChild","srcNodes","hasVarChange","targetElm","documentElement","keys","key","varValue","getComputedStyle","getPropertyValue","style","setProperty","shadowRoot","nodeArray","responseUrl","responseURL","statusText","fixRelativeCssUrls","currentVars","nodeCSS","cssTree","__cssVars","resetCssNodes","outCssArray","outNodeArray","hasKeyframesWithVars","outCss","hasCSSVarFunc","outCssNoSpaces","hasAttribute","removeAttribute","insertBefore","nextSibling","elms","shadowSettings","fixKeyframes","JSON","parse","stringify","addEventListener","init","evt","removeEventListener","isDisabled","isDisabledAttr","isDisabledSheet","tagName","isValidAddMutation","mutationNodes","hasAttr","nodeType","isStyleWithVars","MutationObserver","mutations","mutation","isValid","target","addedNodes","removedNodes","isElm","isOutNode","isSrcNode","orphanNode","observe","attributes","attributeFilter","childList","subtree","delay","clearTimeout","animationNameProp","allNodes","getElementsByTagName","keyframeNodes","len","offsetHeight","nodeStyle","cssUrl","varObj","reLeadingHyphens","reduce","performance","now","Date","getTime","reset"],"mappings":";;;;;;;unCAOA,SAASA,EAAQC,GACb,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC9EG,EAAW,CACXC,SAAUL,EAAQK,UAAY,KAC9BC,aAAcN,EAAQM,cAAgBC,SAASC,UAC/CC,UAAWT,EAAQS,WAAaF,SAASC,UACzCE,QAASV,EAAQU,SAAWH,SAASC,UACrCG,WAAYX,EAAQW,YAAcJ,SAASC,WAE3CI,EAAWC,MAAMC,QAAQf,GAAQA,EAAO,CAAEA,GAC1CgB,EAAWF,MAAMG,MAAM,KAAMH,MAAMD,EAASV,SAASe,cAAcC,GACnE,OAAO,QAEX,SAASC,IACL,IAAIC,EAAUnB,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC9EoB,EAAsC,MAA7BD,EAAQE,OAAOC,OAAO,GACnC,OAAQF,EAEZ,SAASX,EAAQc,EAAKC,GAClBrB,EAASM,QAAQc,EAAKZ,EAASa,GAAWA,GAE9C,SAAShB,EAAUiB,EAAcD,GAC7B,IAAIE,EAAYvB,EAASK,UAAUiB,EAAcd,EAASa,GAAWA,GACrEC,GAA6B,IAAdC,EAAsB,GAAKA,GAAaD,EACvDX,EAASU,GAAYC,GACW,IAA5BX,EAASa,QAAQ,OACjBxB,EAASO,WAAWI,GAG5B,IAAIc,EAASC,SAASC,cAAc,KACpCnB,EAASoB,kBAAkBC,EAAKC,GAK5B,GAJAL,EAAOM,aAAa,OAAQF,GAC5BJ,EAAOO,KAAOC,OAAOR,EAAOO,MACbE,QAAQR,SAASS,MAAQC,OAAOC,OAChBZ,EAAOa,KAAKC,MAAM,KAAK,KAAOC,SAASF,KAAKC,MAAM,KAAK,GACpE,CAEd,GADqBd,EAAOgB,WAAaD,SAASC,SAC9B,CAChB,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOf,GAChBa,EAAIG,QAAU,EACdH,EAAII,WAAa3C,SAASC,UAC1BsC,EAAIK,UAAY5C,SAASC,UACzBsC,EAAIM,OAAS,WACLjC,EAAW2B,EAAIpB,cACfjB,EAAUqC,EAAIpB,aAAcQ,GAE5BxB,EAAQoC,EAAKZ,IAGrBY,EAAIO,QAAU,SAASC,GACnB5C,EAAQoC,EAAKZ,IAEjBqB,uBACIT,EAAIU,SACJ,QAEJC,QAAQC,KAAK,gFAAgFC,OAAO1B,EAAK,MACzGvB,EAAQ,KAAMwB,OAEf,CACH,IAAIV,EAAM,IAAIoC,eACdpC,EAAIwB,KAAK,MAAOf,GACZ7B,EAASC,UAAYmB,EAAIqC,kBACzBrC,EAAIqC,iBAAiBzD,EAASC,UAElCD,EAASE,aAAakB,EAAKS,EAAKC,GAChCV,EAAIsC,mBAAqB,WACE,IAAnBtC,EAAIuC,aACe,MAAfvC,EAAIwC,QAAkB7C,EAAWK,EAAIE,cACrCjB,EAAUe,EAAIE,aAAcQ,GAE5BxB,EAAQc,EAAKU,KAIzBV,EAAIgC,WAkEZ,SAASS,EAAWjE,GACpB,IAAIkE,EACa,oBADbA,EAEY,2EAEZ9D,EAAW,CACX+D,YAAanE,EAAQmE,aAAerC,SACpCsC,QAASpE,EAAQoE,SAAW,+BAC5BC,QAASrE,EAAQqE,SAAW,KAC5BC,OAAQtE,EAAQsE,QAAU,KAC1BC,cAAuC,IAAzBvE,EAAQuE,aACtBC,SAAUxE,EAAQwE,WAAY,EAC9BlE,aAAcN,EAAQM,cAAgBC,SAASC,UAC/CC,UAAWT,EAAQS,WAAaF,SAASC,UACzCE,QAASV,EAAQU,SAAWH,SAASC,UACrCG,WAAYX,EAAQW,YAAcJ,SAASC,WAE3CiE,EAAc5D,MAAMG,MAAM,KAAMZ,EAAS+D,YAAYO,iBAAiBtE,EAASgE,UAAUE,iBAAiBK,GAC1G,OAyIiBC,EAzIOD,EAyIFE,EAzIQzE,EAASiE,UA0I7BO,EAAIE,SAAWF,EAAIG,iBAAmBH,EAAII,uBAAyBJ,EAAIK,oBAAsBL,EAAIM,mBAAqBN,EAAIO,kBACzHC,KAAKR,EAAKC,GAF7B,IAAyBD,EAAKC,KAvItBQ,EAAWxE,MAAMG,MAAM,KAAMH,MAAM4D,EAAYvE,SAASe,cAAcC,GACtE,OAAO,QAEX,SAASoE,IAEL,IAD6C,IAA5BD,EAASzD,QAAQ,MAClB,CACZ,IAAIR,EAAUiE,EAASE,KAAK,IAC5BnF,EAASO,WAAWS,EAASiE,EAAUZ,IAG/C,SAASe,EAAcpE,EAASqE,EAAUd,EAAMe,GAC5C,IAAI/D,EAAYvB,EAASK,UAAUW,EAASuD,EAAMe,IAmCtD,SAASC,EAAevE,EAASuD,EAAMiB,EAASC,GAC5C,IAAIC,EAAc7F,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAClF8F,EAAe9F,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GACnF+F,EAAaC,EAAgB7E,EAASwE,EAASG,GAC/CC,EAAWE,MAAMhG,OACjBJ,EAAQkG,EAAWG,aAAc,CAC7B7F,aAAc,SAAsBkB,EAAKS,EAAKR,GAC1CrB,EAASE,aAAakB,EAAKmD,EAAM1C,IAErCxB,UAAW,SAAmBW,EAASa,EAAKR,GACxC,IAAIE,EAAYvB,EAASK,UAAUW,EAASuD,EAAM1C,GAE9CmE,EAAqBH,EADzB7E,GAAwB,IAAdO,EAAsB,GAAKA,GAAaP,EACAa,EAAK8D,GAIvD,OAHAK,EAAmBF,MAAMlE,kBAAkBqE,EAAMnE,GAC7Cd,EAAUA,EAAQkF,QAAQD,EAAMD,EAAmBG,cAAcrE,OAE9Dd,GAEXV,QAAS,SAAiBc,EAAKS,EAAKR,GAChCqE,EAAYU,KAAK,CACbhF,IAAKA,EACLS,IAAKA,IAET8D,EAAaS,KAAKR,EAAWE,MAAMzE,IACnCkE,EAAevE,EAASuD,EAAMiB,EAASC,EAAYC,EAAaC,IAEpEpF,WAAY,SAAoB8F,GAC5BA,EAAczE,kBAAkB0E,EAAYxE,GACxCd,EAAUA,EAAQkF,QAAQN,EAAWE,MAAMhE,GAAIwE,MAEnDf,EAAevE,EAASuD,EAAMiB,EAASC,EAAYC,EAAaC,MAIxEF,EAAWzE,EAAS0E,IAnExBH,CADAvE,OAAwBjB,IAAdwB,IAAkD,IAAvBW,QAAQX,GAAuB,GAAKA,GAAaP,EAC9DuD,EAAMe,YAAqBiB,EAAiBC,GACrC,OAAvBvB,EAASI,KACTmB,EAAU5E,kBAAkB6E,GACxB,OAAOzG,EAASM,QAAQmG,EAAKrF,IAAKmD,EAAMkC,EAAK5E,SAE5C7B,EAASkE,QAAUlE,EAASkE,OAAOwC,KAAKH,GACzCtB,EAASI,GAAYkB,EAErBtB,EAASI,GAAY,GAEzBH,QAIZ,SAASW,EAAgB7E,EAASwE,GAC9B,IAAImB,EAAc9G,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAClF+F,EAAa,GAejB,OAdAA,EAAWE,OAAS9E,EAAQkF,QAAQpC,EAAmB,IAAI8C,MAAM9C,IAAqB,IAAII,iBAAiB+B,GACvG,OAAsC,IAA/BU,EAAYnF,QAAQyE,MAE/BL,EAAWjG,KAAOiG,EAAWE,MAAMjF,cAAcoF,GAC7C,OAAOA,EAAKC,QAAQpC,EAAkB,SAE1C8B,EAAWG,aAAeH,EAAWjG,KAAKkB,cAAcgB,GACpD,OAAOgF,EAAWhF,EAAK2D,MAE3BI,EAAWO,cAAgBP,EAAWE,MAAMjF,cAAcoF,EAAMnE,GAC5D,IAAIgF,EAASlB,EAAWjG,KAAKmC,GACzBiF,EAASF,EAAWjB,EAAWG,aAAajE,GAAI0D,GACpD,OAAOS,EAAKC,QAAQY,EAAQC,MAEzBnB,EAuCPvB,EAAYvE,OACZuE,EAAYzC,kBAAkB2C,EAAMzC,GAChC,IAAIkF,EAAWzC,EAAK0C,aAAa,QAC7BC,EAAU3C,EAAK0C,aAAa,OAC5BE,EAA2B,SAAlB5C,EAAK6C,UAAuBJ,GAAYE,IAA4D,IAAjDA,EAAQG,cAAc7F,QAAQ,cAC1F8F,GAAmC,IAA1BtH,EAASmE,cAAiCI,EAAKgD,SACxDC,EAA4B,UAAlBjD,EAAK6C,SACnB,GAAID,IAAWG,EACX5H,EAAQsH,EAAU,CACd/G,SAAU,WACVC,aAAc,SAAsBkB,EAAKS,EAAKR,GAC1CrB,EAASE,aAAakB,EAAKmD,EAAM1C,IAErCxB,UAAW,SAAmBW,EAASa,EAAKR,GACxC,IAAIiE,EAAYuB,EAAWG,GAC3B5B,EAAcpE,EAASc,EAAGyC,EAAMe,IAEpChF,QAAS,SAAiBc,EAAKS,EAAKR,GAChC4D,EAASnD,GAAK,GACd9B,EAASM,QAAQc,EAAKmD,EAAM1C,GAC5BqD,YAGL,GAAIsC,IAAYF,EAAQ,CAC3B,IAAItG,EAAUuD,EAAKkD,YACfzH,EAASoE,WACTpD,EAAUP,MAAMG,MAAM,KAAM2D,EAAKmD,MAAMC,UAAU9G,cAAcoF,GAC3D,OAAOA,EAAKjF,WACZmE,KAAK,KAEbC,EAAcpE,EAASc,EAAGyC,EAAM/B,SAASR,WAEzCiD,EAASnD,GAAK,GACdoD,OAIRlF,EAASO,WAAW,GAAI,IAIhC,SAASsG,EAAWhF,EAAK+F,GACrB,IAAIC,EAAInG,SAASoG,eAAeC,mBAAmB,IAC/CC,EAAIH,EAAElG,cAAc,QACpBsG,EAAIJ,EAAElG,cAAc,KAKxB,OAJAkG,EAAEK,KAAKC,YAAYH,GACnBH,EAAEO,KAAKD,YAAYF,GACnBD,EAAEhG,KAAO4F,GAAQlG,SAAS2G,UAAY3G,SAAS4G,cAAc,SAAW,IAAItG,MAAQQ,SAASR,KAC7FiG,EAAEjG,KAAOH,EACFoG,EAAEjG,KC5Sb,MAAiBuG,EACjB,SAASA,EAASN,EAAGD,EAAGQ,GAClBP,aAAaQ,SAAQR,EAAIS,EAAWT,EAAGO,IACvCR,aAAaS,SAAQT,EAAIU,EAAWV,EAAGQ,IAE3C,IAAIG,EAAIC,EAAMX,EAAGD,EAAGQ,GAEpB,OAAOG,GAAK,CACVE,MAAOF,EAAE,GACTG,IAAKH,EAAE,GACPI,IAAKP,EAAIQ,MAAM,EAAGL,EAAE,IACpBP,KAAMI,EAAIQ,MAAML,EAAE,GAAKV,EAAEnI,OAAQ6I,EAAE,IACnCM,KAAMT,EAAIQ,MAAML,EAAE,GAAKX,EAAElI,SAI7B,SAAS4I,EAAWQ,EAAKV,GACvB,IAAIW,EAAIX,EAAI5B,MAAMsC,GAClB,OAAOC,EAAIA,EAAE,GAAK,KAIpB,SAASP,EAAMX,EAAGD,EAAGQ,GACnB,IAAIY,EAAMC,EAAKC,EAAMC,EAAOC,EACxBC,EAAKjB,EAAIhH,QAAQyG,GACjByB,EAAKlB,EAAIhH,QAAQwG,EAAGyB,EAAK,GACzB3H,EAAI2H,EAER,GAAIA,GAAM,GAAKC,EAAK,EAAG,CAIrB,IAHAN,EAAO,GACPE,EAAOd,EAAI1I,OAEJgC,GAAK,IAAM0H,GACZ1H,GAAK2H,GACPL,EAAKhD,KAAKtE,GACV2H,EAAKjB,EAAIhH,QAAQyG,EAAGnG,EAAI,IACA,GAAfsH,EAAKtJ,OACd0J,EAAS,CAAEJ,EAAKO,MAAOD,KAEvBL,EAAMD,EAAKO,OACDL,IACRA,EAAOD,EACPE,EAAQG,GAGVA,EAAKlB,EAAIhH,QAAQwG,EAAGlG,EAAI,IAG1BA,EAAI2H,EAAKC,GAAMD,GAAM,EAAIA,EAAKC,EAG5BN,EAAKtJ,SACP0J,EAAS,CAAEF,EAAMC,IAIrB,OAAOC,EChCT,SAASI,EAASC,OAAKjK,yDAAU,GACvBkK,EAAW,CACbC,gBAAgB,EAChBC,gBAAgB,GAEdhK,EAAWiK,EAAc,GAAIH,EAAUlK,GACvCsK,EAAW,YAIRC,EAAMC,SACL,IAAIC,iCAA0BD,aAM/BxD,EAAM0D,OACLnB,EAAImB,EAAGC,KAAKV,MAEdV,SACAU,EAAMA,EAAIb,MAAMG,EAAE,GAAGrJ,QAEdqJ,WAINvG,WACEgE,EAAM,kBAGR4D,WACE5D,EAAM,eAGR6D,IACL7D,EAAM,iBAKD8D,OACLD,IAEe,MAAXZ,EAAI,IAAyB,MAAXA,EAAI,YAItB/H,EAAI,EAED+H,EAAI/H,KAAkB,MAAX+H,EAAI/H,IAA6B,MAAf+H,EAAI/H,EAAI,KACxCA,QAGC+H,EAAI/H,UACEqI,EAAM,iCAGX3B,EAAMqB,EAAIb,MAAM,EAAGlH,UAEzB+H,EAAMA,EAAIb,MAAMlH,EAAI,GAEb,CACH6I,KAAS,UACTD,QAASlC,aAIRoC,YAEDC,EADEC,EAAQ,GAGND,EAAIH,KACRI,EAAM1E,KAAKyE,UAGR7K,EAASgK,eAAiB,GAAKc,WAKjCrG,QACLgG,IAEkB,MAAXZ,EAAI,IACPM,EAAM,6BAGJhB,EAAIvC,EAAM,iDAEZuC,SACOA,EAAE,GACJjI,OACAgF,QAAQ,+CAAgD,IACxDA,QAAQ,oCAAoC,SAASiD,UAC3CA,EAAEjD,QAAQ,KAAM,QAE1B3D,MAAM,sBACN1B,KAAI,SAASkK,UACHA,EAAE7E,QAAQ,UAAW,iBAOnC8E,OAEU,MAAXnB,EAAI,UACGoB,IAGXrE,EAAM,kBAEAsE,EAAiB,kCACnBC,EAAOvE,EAAM,6CAEZuE,MAILA,EAAOA,EAAK,GAAGjK,QAEV0F,EAAM,gBACAuD,EAAM,4BAIXiB,EAAMxE,EAAM,wGACZyE,EAAM,CACRV,KAAU,cACVW,SAAUH,EAAKjF,QAAQgF,EAAgB,IACvCK,MAAUH,EAAMA,EAAI,GAAGlF,QAAQgF,EAAgB,IAAIhK,OAAS,WAGhE0F,EAAM,WAECyE,YAGFG,QACA5I,WACMuH,EAAM,uBAGbtC,EACA4D,EAAQb,IAEJ/C,EAAImD,KACRS,EAAMrF,KAAKyB,GACX4D,EAAQA,EAAMlI,OAAOqH,YAGpBJ,IAIEiB,EAHItB,EAAM,wBAQZuB,IACLjB,YAGItB,EADEwC,EAAO,GAGLxC,EAAIvC,EAAM,wCACd+E,EAAKvF,KAAK+C,EAAE,IACZvC,EAAM,YAGN+E,EAAK7L,aACE,CACH6K,KAAc,WACdiB,OAAcD,EACdH,aAAcA,cAKjBK,QACD1C,EAAIvC,EAAM,8BAETuC,OAIC2C,EAAS3C,EAAE,QAEjBA,EAAIvC,EAAM,wBAGCuD,EAAM,+BASb4B,EANEC,EAAO7C,EAAE,OAEVvG,WACMuH,EAAM,kCAIb8B,EAASrB,IAELmB,EAAQL,KACZO,EAAO7F,KAAK2F,GACZE,EAASA,EAAO1I,OAAOqH,YAGtBJ,IAIE,CACHG,KAAW,YACXqB,KAAWA,EACXF,OAAWA,EACXI,UAAWD,GAPJ9B,EAAM,oCAaZgC,OACKvF,EAAM,kBAGL,CAAE+D,KAAM,OAAQyB,UADX3H,KAAc,GACa+G,aAAcA,cAGpDa,QACClD,EAAIvC,EAAM,mFACZuC,QAEO,CAAEwB,KAAM,kBAAmBqB,KADrB,UAAG7C,EAAE,eAAMA,EAAE,KAAQA,EAAE,cAASA,EAAE,IAAO,IACdqC,aAAcA,cAGrDc,OACK1F,EAAM,wBACA,CAAE+D,KAAM,YAAaa,aAAcA,cAE9Ce,QACCpD,EAAIvC,EAAM,0BACZuC,QAAY,CAAEwB,KAAM,WAAY6B,SAAUrD,EAAE,GAAGjI,OAAQ4E,MAAOA,cAE7D2G,OACK7F,EAAM,mBACA,CAAE+D,KAAM,OAAQ7E,MAAOA,cAElC4G,QACCvD,EAAIvC,EAAM,sBACZuC,QAAY,CAAEwB,KAAM,QAASgC,OAAQxD,EAAE,IAAM,IAAIjI,OAAQ4E,MAAOA,cAE/D8G,QACCzD,EAAIvC,EAAM,8CACZuC,QAAY,CAAEwB,KAAM,eAAgBqB,KAAM7C,EAAE,GAAGjI,OAAQyL,MAAOxD,EAAE,GAAGjI,iBAElE2L,QACC1D,EAAIvC,EAAM,mCACZuC,QAAY,CAAEwB,KAAM,WAAYjJ,SAAUyH,EAAE,GAAGjI,OAAQ4K,OAAQ3C,EAAE,GAAKA,EAAE,GAAGjI,OAAS,KAAM4E,MAAOA,cAEhGgH,QACC3D,EAAIvC,EAAM,8CACZuC,QAAY,CAAEwB,KAAMxB,EAAE,GAAI6C,KAAM7C,EAAE,GAAGjI,iBAEpC+J,OACLR,IAEe,MAAXZ,EAAI,GAAY,KACVwB,EACFyB,KACAR,KACAI,KACAb,KACAU,KACAM,KACAD,KACAH,KACAN,KACAE,OAEAhB,IAAQrL,EAAS+J,eAAgB,KAC7BgD,GAAa,KAGb1B,EAAIG,aACJuB,EAAa1B,EAAIG,aAAawB,MAAK,SAAAC,SAAQ,QAAQvG,KAAKuG,EAAK1B,eAM7DwB,GAFY1B,EAAIa,WAAab,EAAIvF,OAAS,IAEzBkH,MAAK,SAAAE,UAAQA,EAAI1B,cAAgB,IAAIwB,MAAK,SAAAC,SAAQ,QAAQvG,KAAKuG,EAAK1B,oBAGlFwB,EAAa1B,EAAM,UAGvBA,YAMNpF,QACAjG,EAAS+J,eAAgB,KACpBoD,EAAgB5E,EAAS,IAAK,IAAKsB,MAIrCsD,EAAe,KACTC,EAAa,2BAA2B1G,KAAKyG,EAAcpE,MAAQ,YAAYrC,KAAKyG,EAAc/E,MAClG2E,EAAa,QAAQrG,KAAKyG,EAAc/E,UAEzCgF,IAAeL,SAChBlD,EAAMA,EAAIb,MAAMmE,EAAcrE,IAAM,GAE7B,QAKbuE,EAAQ5I,KAAc,GACtBgH,EAAQzL,EAAS+J,eAAiByB,IAAiBA,IAAetH,QAAO,SAAA+I,OACrEG,EAAaC,EAAIL,MAAK,SAAAjC,SAAK,2BAA2BrE,KAAKqE,OAAO,QAAQrE,KAAKuG,EAAK3B,UACpFyB,EAAa,QAAQrG,KAAKuG,EAAK1B,cAE9B6B,GAAcL,YAGpBM,EAAIvN,QACLqK,EAAM,oBAGH,CACHQ,KAAc,OACdyB,UAAciB,EACd7B,aAAcC,YAIb3F,EAAMwH,OACNA,IAAS1K,WACHuH,EAAM,uBAGb5F,EACAuB,EAAQ8E,IAELf,EAAI/J,SAAWwN,GAAmB,MAAXzD,EAAI,MAAgBtF,EAAO0G,KAAahF,MAC9D1B,EAAKoG,MACL7E,EAAMM,KAAK7B,GAGfuB,EAAQA,EAAMvC,OAAOqH,YAGpB0C,GAAS9C,IAIP1E,EAHIqE,EAAM,qBAMd,CACHQ,KAAM,aACN4C,WAAY,CACRzH,MAAOA,GAAM,GACboE,OAAQA,ICzXpB,SAASsD,EAAUC,OAAS7N,yDAAU,GAC5BkK,EAAW,CACb4D,WAAW,EACXC,MAAW,GACXC,wBAEE5N,EAAqBiK,EAAc,GAAIH,EAAUlK,GACjDiO,EAAqB,IAAIpF,kBAAYzI,EAAS0N,UAAY,OAAS,mBAGlD,iBAAZD,IACPA,EAAU7D,EAAS6D,EAASzN,IAIhCyN,EAAQF,WAAWzH,MAAMlE,SAAQ,SAASqE,GAGpB,SAAdA,EAAK0E,MAAoB1E,EAAKmG,UAAUY,MAAK,SAAAjC,UAAK8C,EAAmBnH,KAAKqE,OAI9E9E,EAAKuF,aAAa5J,SAAQ,SAASqL,EAAMnL,OAC/BqJ,EAAQ8B,EAAK3B,SACbC,EAAQ0B,EAAK1B,MAEfJ,GAA+B,IAAvBA,EAAK3J,QAAQ,QACrBxB,EAAS2N,MAAMxC,GAAQI,SAO5BvL,EAAS2N,MCpCpB,SAASG,EAAaC,OAAMC,yDAAQ,GAAIC,yCAC9BC,EAAgB,CAClBC,iBAAQ5J,SACG,YAAcA,EAAKyH,KAAO,KAErCtB,iBAAQnG,UAEiD,IAA9CA,EAAKmG,QAAQlJ,QAAQ,qBAA6B,KAAO+C,EAAKmG,QAAU,KAAO,4BAE3EnG,SACJ,iBAAmBA,EAAKyH,KAAO,IAAMzH,EAAKoI,MAAQ,KAE7D3B,qBAAYzG,UACDA,EAAK+G,SAAW,IAAM/G,EAAKgH,MAAQ,KAE9C7J,kBAAS6C,SACE,KAAOA,EAAKuH,QAAU,IAAM,YAAcvH,EAAK7C,SAAW,IAAM0M,EAAM7J,EAAKuB,OAAS,0BAEnFvB,SACD,cAAqB6J,EAAM7J,EAAKiH,cAAgB,KAE3DlJ,cAAKiC,SACM,SAAgB6J,EAAM7J,EAAKuB,OAAS,KAE/CuI,gBAAO9J,SAEI,WAAaA,EAAKyH,KAAO,KAEpCN,kBAASnH,UACEA,EAAKqH,OAAOzG,KAAK,KAAO,IAAMiJ,EAAM7J,EAAKiH,cAAgB,KAEpEU,mBAAU3H,SACC,KAAOA,EAAKuH,QAAU,IAAM,aAAevH,EAAKyH,KAAO,IAAMoC,EAAM7J,EAAK2H,WAAa,KAEhGS,eAAMpI,SACK,UAAYA,EAAKoI,MAAQ,IAAMyB,EAAM7J,EAAKuB,OAAS,KAE9DwI,mBAAU/J,SACC,cAAgBA,EAAKyH,KAAO,KAEvCuC,cAAKhK,SACM,UAAYA,EAAK6H,UAAUtM,OAASyE,EAAK6H,UAAUjH,KAAK,MAAQ,IAAM,IAAMiJ,EAAM7J,EAAKiH,cAAgB,gCAEhGjH,SACP,IAAMA,EAAKyH,KAAO,IAAMoC,EAAM7J,EAAKiH,cAAgB,KAE9DvF,cAAK1B,OACKkH,EAAQlH,EAAKiH,gBAEfC,EAAM3L,cACCyE,EAAK6H,UAAUjH,KAAK,KAAO,IAAMiJ,EAAM3C,GAAS,KAG/De,kBAASjI,SAEE,aAAeA,EAAKiI,SAAW,IAAM4B,EAAM7J,EAAKuB,OAAS,eAI/DsI,EAAMI,WACPC,EAAM,GAED3M,EAAI,EAAGA,EAAI0M,EAAM1O,OAAQgC,IAAK,KAC7B4M,EAAIF,EAAM1M,GAEZmM,GACAA,EAAGS,OAGDC,EAAMT,EAAcQ,EAAE/D,MAAM+D,GAE9BC,IACAF,GAAOE,EAEHA,EAAI7O,QAAU4O,EAAEtC,YAChBqC,GAAOT,WAKZS,SAGJL,EAAML,EAAKR,WAAWzH,OCrFjC,SAAS8I,EAAQrK,EAAMsK,GACnBtK,EAAKuB,MAAMlE,SAAQ,SAASqE,GAEpBA,EAAKH,MACL8I,EAAQ3I,EAAM4I,GAMd5I,EAAKiG,UACLjG,EAAKiG,UAAUtK,SAAQ,SAAS8J,GACN,aAAlBA,EAASf,MACTkE,EAAGnD,EAASF,aAAcvF,MAQjCA,EAAKuF,cAIVqD,EAAG5I,EAAKuF,aAAcjH,MJjB9BgE,EAASK,MAAQA,EKmBjB,SAASkG,EAAarB,OAAS7N,yDAAU,GAC/BkK,EAAW,CACbC,gBAAgB,EAChBgF,cAAgB,EAChBC,UAAgB,GAChBpB,wBAEE5N,EAAWiK,EAAc,GAAIH,EAAUlK,SAGtB,iBAAZ6N,IACPA,EAAU7D,EAAS6D,EAASzN,IAIhC4O,EAAQnB,EAAQF,YAAY,SAAS/B,EAAcjH,OAC1C,IAAIzC,EAAI,EAAGA,EAAI0J,EAAa1L,OAAQgC,IAAK,KACpCmL,EAAQzB,EAAa1J,GACrB6I,EAAQsC,EAAKtC,KACbQ,EAAQ8B,EAAK3B,SACbC,EAAQ0B,EAAK1B,SAGN,gBAATZ,KAKC3K,EAAS+O,eAAgB5D,GAA8C,IAAtCA,EAAK3J,QArD3B,WA4DkC,IAA9C+J,EAAM/J,QAAQyN,QAAmC,KAC7CC,EAAgBC,EAAa5D,EAAOvL,GAEpCkP,IAAkBjC,EAAK1B,QAEvB2D,EAAgBE,EAAcF,GAGzBlP,EAAS+O,cAKVvD,EAAa6D,OAAOvN,EAAG,EAAG,CACtB6I,KAAUA,EACVW,SAAUH,EACVI,MAAU2D,IAIdpN,KAXAmL,EAAK1B,MAAQ2D,SAfrB1D,EAAa6D,OAAOvN,EAAG,GACvBA,QAiCLgM,EAAaL,GAYxB,SAAS2B,EAAc7D,UAGlBA,EAAM3E,MAFW,qBAES,IAAIhF,SAAQ,SAAAgF,OAC7B0I,gBAAgB1I,EAAMrE,MAAM,QAAQ4C,KAAK,KAC/CoG,EAAQA,EAAMrF,QAAQU,EAAO0I,MAG1B/D,EAwBX,SAAS4D,EAAa5D,OAAOvL,yDAAW,GAAIuP,6CACT,IAA3BhE,EAAM/J,QAAQ,eACP+J,MAGLiE,EAAYjH,EAAS,IAAK,IAAKgD,YAgB5BkE,EAAYlE,OACXS,EAAqBT,EAAMhJ,MAAM,KAAK,GAAG2D,QAAQ,YAAa,IAC9DwJ,GAAsBnE,EAAM3E,MAAM,wBAA0B,IAAI,GAChEA,EAAqB+I,OAAOvP,UAAUwP,eAAe5K,KAAKhF,EAASgP,UAAWhD,GAAQ/J,OAAOjC,EAASgP,UAAUhD,SAASjM,EACzH8P,EAAqBjJ,IAAU8I,EAAWzN,OAAOyN,QAAY3P,GAC7D+P,EAAqBP,GAAuBhE,SAE7C3E,GACD5G,EAAS4N,8BAAuB5B,qBAGhC6D,GAA+B,cAAhBA,GAA+BA,EAAY/P,OAAS,EAC5DqP,EAAaU,EAAa7P,EAAU8P,iBAG7BA,UAKjBN,EAQA,CAAA,GAAgC,QAA5BA,EAAUzG,IAAIC,OAAO,GAAc,KAClC+G,EAAkD,IAAjCP,EAAUpH,KAAKlH,OAAOpB,cAEzCiQ,GACA/P,EAAS4N,UAAU,8CAEZrC,GAIHiE,EAAUzG,IAAIC,MAAM,GAAG,GACrByG,EAAYD,EAAUpH,MACtB+G,EAAaK,EAAUvG,KAAMjJ,UAOnCwP,EAAUzG,eACJoG,EAAaK,EAAUpH,KAAMpI,QACjCmP,EAAaK,EAAUvG,KAAMjJ,UA5BJ,IAA3BuL,EAAM/J,QAAQ,SACdxB,EAAS4N,sDAA+CrC,QAGrDA,ECvLf,IAAMyE,EAAoC,oBAAX5N,OACzB6N,EAAkBD,GAAa5N,OAAO8N,KAAO9N,OAAO8N,IAAI1D,UAAYpK,OAAO8N,IAAI1D,SAAS,YAExF2D,EAAW,CACbC,MAAO,EACPC,IAAO,GAELvG,EAAW,CAEb/F,YAAgBiM,EAAYtO,SAAW,KACvC4O,WAAgB,EAEhBtM,QAAgB,6BAChBC,QAAgB,GAChB+K,UAAgB,GAEhBuB,YAAgB,EAChBxG,gBAAgB,EAChBgF,cAAgB,EAChByB,QAAgB,EAChBC,WAAgB,EAChBC,YAAgB,EAChBC,MAAgB,KAEhBzQ,0BACAI,qBACAsN,uBACAvN,uBACAE,wBACAqQ,wBAEE9M,EAAQ,CAEV+M,YAAa,oBAGbC,aAAc,uBAGdC,gBAAiB,gCAGjBC,QAAS,0DAGTC,gBAAiB,qDAEjBC,YAAa,+CAEbC,WAAY,kBAEZC,QAAS,+FAEPC,EAAgB,CAElBC,IAAM,GAENjB,IAAM,GAENkB,KAAM,IAINC,GAAmB,EAGnBC,EAAkB,KAGlBC,EAAsB,EAGtBC,EAAgB,KAIhBC,GAAmB,EAkGvB,SAASR,QAAQxR,yDAAU,GACjBiS,EAAY,cACZ7R,EAAYiK,EAAc,GAAIH,EAAUlK,YAErCkS,EAAYC,EAASC,EAAY5Q,EAAKS,IAEtC7B,EAASwQ,QAAUpO,OAAOiB,SAE3BA,QAAQ8G,gBAAS0H,UAAYE,QAAaC,GAG9ChS,EAASM,QAAQyR,EAASC,EAAY5Q,EAAKS,YAGtCoQ,EAAcF,IAEd/R,EAASwQ,QAAUpO,OAAOiB,SAE3BA,QAAQC,eAAQuO,UAAYE,IAGhC/R,EAAS4N,UAAUmE,YAGdG,EAAcC,GACnBnS,EAAS4Q,UACL1O,QAAQiQ,GACRlC,EACAmC,IAAiBpS,EAASqS,gBAK7BrC,MAKDhQ,EAAS2Q,aACT3Q,EAAS2Q,MAAQ7G,EAAS6G,MAC1B2B,EAAoBtS,QACpBoR,EAAQpR,OAIgB,IAAnBA,EAAS2Q,OAAmBc,IACjCA,EAAgBc,aAChBd,EAAkB,OAIjBzR,EAASqS,YAAa,IAEnBb,IAAqBxR,EAAS+D,wBAC9ByO,EAAiB5S,MAKrBI,EAASqS,YAAcD,IAGvBpS,EAASiE,QAAU,CAOfwN,EAAkB,wCAA0C,uBAC5DzR,EAASiE,SACXC,QAAO,SAAAO,UAAYA,KAAUU,KAAK,KAGpCnF,EAASgP,UAAYyD,EAAYzS,EAASgP,YAGrCyC,EAAiB,KACZiB,EAAWjS,MAAMG,MAAM,KAAMZ,EAAS+D,YAAYO,iBAAiB,4BAGzEoO,EAAS9Q,SAAQ,SAAA+Q,OACPC,EAAYD,EAAQ1L,aAAa,uBACrB2L,EAAY5S,EAAS+D,YAAYuE,iEAA0DsK,SAAiB,OAG1HD,EAAQE,WAAWC,YAAYH,MAKnCjB,EAAqB,KACfqB,EAAW/S,EAAS+D,YAAYO,iBAAiB,4CAEnDyO,EAASjT,OAAS4R,IAElBA,EAAsBqB,EAASjT,OAG/BuR,EAAcC,IAAM,SAOR,YAAxB5P,SAASiC,cAELsM,GAAmBjQ,EAASuQ,WAAY,KACpCyC,GAAe,KAGfhT,EAASyQ,UAAW,KACdwC,EAAYjT,EAAS+D,YAAYzB,OAAStC,EAAS+D,cAAgBrC,SAAWA,SAASwR,gBAAkBlT,EAAS+D,aAGxH4L,OAAOwD,KAAKnT,EAASgP,WAAWpN,SAAQ,SAAAwR,OAC9BC,EAAWrT,EAASgP,UAAUoE,GAEpCJ,EAAeA,GAAgBK,IAAaC,iBAAiBL,GAAWM,iBAAiBH,GACzFH,EAAUO,MAAMC,YAAYL,EAAKC,MAIzCnB,EAAcc,QAGRpB,IAAqB5R,EAASsQ,WAAatQ,EAAS+D,YAAY2P,YAAc1T,EAAS+D,YAAYzB,MAEzGuB,EAAW,CACPE,YAAc+F,EAAS/F,YACvBC,QAAc8F,EAAS9F,QACvBC,QAAcjE,EAASiE,QACvBE,cAAc,EACd9D,mBAAUW,EAASuD,EAAM1C,UAKrBb,IAJAA,EAAUA,EACLkF,QAAQpC,EAAM+M,YAAa,IAC3B3K,QAAQpC,EAAMiN,gBAAiB,KAEjBnK,MAAM9C,EAAMmN,kBAAoB,IAAI9L,KAAK,OAG1C,GAEtB5E,oBAAWS,EAASiE,EAAU0O,GAI1BnG,EAAUxM,EAAS,CACf2M,MAAW0D,EAAcC,IACzB1D,UAAWqE,IAGfL,GAAmB,EAKnBR,EAAQpR,OAUhBwR,EAAmBxR,EAAS+D,YAE5BF,EAAW,CACPE,YAAc/D,EAAS+D,YACvBC,QAAchE,EAASgE,QACvBC,QAAcjE,EAASiE,QACvBE,cAAc,EACdjE,aAAcF,EAASE,aACvBI,iBAAQc,EAAKmD,EAAM1C,OACT+R,EAAcxS,EAAIyS,aAAehN,EAAWhF,EAAKW,SAASR,MAC1D8R,EAAc1S,EAAI0S,sBAAiB1S,EAAI0S,gBAAgB,qBAAsC,IAAf1S,EAAIwC,OAAe,2BAA6B,IAGpIkO,2BAFsC8B,cAAexS,EAAIwC,mBAAUkQ,GAE7CvP,EAAMnD,EAAKwS,IAErCvT,mBAAUW,EAASuD,EAAM1C,OACfN,EAAYvB,EAASK,UAAUW,EAASuD,EAAM1C,UAGpDb,OAAwBjB,IAAdwB,IAAkD,IAAvBW,QAAQX,GAAuB,GAAKA,GAAaP,EAGlFhB,EAAS0Q,aACT1P,EAAU+S,EAAmB/S,EAASa,IAGnCb,GAEXT,oBAAWS,EAASiE,OAAU0O,yDAAY,GAChCK,EAAc/J,EAAc,GAAIoH,EAAcC,IAAKD,EAAcE,SAKvEF,EAAchB,IAAM,GAGpBsD,EAAU/R,SAAQ,SAAC2C,EAAMzC,OACfmS,EAAUhP,EAASnD,MAIrBgC,EAAMsN,QAAQ1K,KAAKuN,WAETC,EAAUtK,EAASqK,EAAS,CAC9BlK,eAAgB/J,EAAS+J,eACzBC,gBAAgB,IAIpBwD,EAAU0G,EAAS,CACfxG,UAAWxL,QAAQlC,EAAS+D,YAAYzB,MACxCqL,MAAW0D,EAAcC,IACzB1D,UAAWqE,IAIf1N,EAAK4P,UAAY,CAAEpG,KAAMmG,GAE7B,MAAMhR,GACF4O,EAAY5O,EAAI6O,QAASxN,SAMvB8M,EAAchB,IAAKgB,EAAcC,KAE3CtR,EAASyQ,aAEKY,EAAcE,KAAMvR,EAASgP,aAG7BqC,EAAchB,IAAKgB,EAAcE,UAIjCF,EAAchB,IAAKgB,EAAcE,KAAMvR,EAASgP,aAGhDgF,EAAahU,EAASgP,YAMpCmB,EAASE,IAAM,GAEfnO,QAEKyN,OAAOwD,KAAK9B,EAAchB,KAAKvQ,OAAS6P,OAAOwD,KAAKa,GAAalU,QAElEoC,QAEIyN,OAAOwD,KAAKa,GAAalU,QAEzB6P,OAAOwD,KAAK9B,EAAchB,KAAKrD,MAAK,SAAAoG,UAAO/B,EAAchB,IAAI+C,KAASY,EAAYZ,QAM1FgB,EAAcpU,EAAS+D,aACvBqN,EAAQpR,OAGP,KACKqU,EAAe,GACfC,EAAe,GAEjBC,GAAuB,KAGvBvU,EAASyQ,WACTN,EAASE,MAGbsD,EAAU/R,SAAQ,SAAC2C,EAAMzC,OACjBwF,GAAU/C,EAAK4P,aAEf5P,EAAK4P,cAEDrF,EAAavK,EAAK4P,UAAUpG,KAAM9D,EAAc,GAAIjK,EAAU,CAC1DgP,UAAWqC,EAAchB,IACzBzC,UAAWqE,SAGTuC,EAAS1G,EAAavJ,EAAK4P,UAAUpG,SAEvC/N,EAASyQ,UAAW,KACdwD,EAAgBhP,EAASnD,GACzB2S,EAAgB3Q,EAAMqN,WAAWzK,KAAKuN,MAEvC1P,EAAK0C,aAAa,iBACnB1C,EAAKxC,aAAa,eAAgB,OAGlCyS,EAAO1U,QAAU2U,EAAe,KAC1B7B,EAAiBrO,EAAK0C,aAAa,yBAA2BkJ,EAASC,MACvEsE,EAAiBF,EAAOtO,QAAQ,MAAM,IACtCyM,EAAiB3S,EAAS+D,YAAYuE,iEAA0DsK,UAAkBlR,SAASC,cAAc,SAE/I4S,EAAuBA,GAAwBzQ,EAAMgN,aAAapK,KAAK8N,GAGnExU,EAAS+J,iBACTxF,EAAKmD,MAAMH,UAAW,GAGrBoL,EAAQgC,aAAa,iBACtBhC,EAAQ5Q,aAAa,eAAgB,OAIrC2S,IAAmBnQ,EAAKkD,YAAYvB,QAAQ,MAAM,KAClDoB,GAAS,EAELqL,GAAWA,EAAQE,aACnBtO,EAAKqQ,gBAAgB,sBACrBjC,EAAQE,WAAWC,YAAYH,KAI9B+B,IAAmB/B,EAAQlL,YAAYvB,QAAQ,MAAM,OACzD3B,EAAMoO,GAAS/Q,SAAQ,SAAA8M,GACpBA,EAAE3M,aAAa,mBAAoBoO,EAASE,KAC5C3B,EAAE3M,aAAa,qBAAsB6Q,MAEzCD,EAAQlL,YAAc+M,EACtBH,EAAYjO,KAAKoO,GACjBF,EAAalO,KAAKuM,GAEbA,EAAQE,YACTtO,EAAKsO,WAAWgC,aAAalC,EAASpO,EAAKuQ,oBAMnDvQ,EAAKkD,YAAYvB,QAAQ,MAAM,MAAQsO,GACvCH,EAAYjO,KAAKoO,GAI7B,MAAMtR,GACF4O,EAAY5O,EAAI6O,QAASxN,GAI7B+C,GACA/C,EAAKxC,aAAa,eAAgB,QAGjCwC,EAAKoQ,aAAa,qBACnBpQ,EAAKxC,aAAa,mBAAoBoO,EAASE,QAKvDqB,EAAsB1R,EAAS+D,YAAYO,iBAAiB,4CAA4CxE,OAGpGE,EAASsQ,kBASO9L,EARVuQ,GACF/U,EAAS+D,sBACN/D,EAAS+D,YAAYO,iBAAiB,OAMpCxC,EAAI,EAAS0C,EAAMuQ,EAAKjT,KAAOA,KAChC0C,EAAIkP,YAAclP,EAAIkP,WAAWpL,cAAc,SAAU,KACnD0M,EAAiB/K,EAAc,GAAIjK,EAAU,CAC/C+D,YAAaS,EAAIkP,aAGrBtC,EAAQ4D,GAMhBhV,EAASyQ,WAAa8D,GACtBU,EAAajV,EAAS+D,aAM1ByN,GAAmB,EAGnBxR,EAASO,WACL8T,EAAYlP,KAAK,IACjBmP,EACAY,KAAKC,MAAMD,KAAKE,UAAU/D,EAAchB,MACxC+B,IAAiBpS,EAASqS,aAG9BH,EAAcoC,EAAaxU,kBAS3C4B,SAAS2T,iBAAiB,oBAAoB,SAASC,EAAKC,GACxDnE,EAAQxR,GAER8B,SAAS8T,oBAAoB,mBAAoBF,OA4C7D,SAAShD,EAAoBtS,YAChByV,EAAWlR,OACVmR,EAAkBnR,EAAKoQ,aAAa,YACpCgB,GAAmBpR,EAAKmD,OAAS,IAAIH,gBAEpCmO,GAAkBC,WAEpBxO,EAAO5C,SAC0B,SAAjBA,EAAKqR,UAAkF,KAA3DrR,EAAK0C,aAAa,QAAU,IAAIzF,QAAQ,gBAEjEiU,EAAWlR,YAK9BsR,EAAmBC,UACjBrV,MAAMG,MAAM,KAAMkV,GAAe9I,MAAK,SAAAzI,OAEnCwR,EADoC,IAAlBxR,EAAKyR,UACIzR,EAAKoQ,aAAa,gBAC7CsB,WAPG1R,SACW,UAAjBA,EAAKqR,UAAwBH,EAAWlR,GAMnBiD,CAAQjD,IAAST,EAAMsN,QAAQ1K,KAAKnC,EAAKkD,oBACxCsO,IAAY5O,EAAO5C,IAAS0R,MA8BxD7T,OAAO8T,mBAIRzE,IACAA,EAAgBc,aAChBd,EAAkB,OAGtBA,EAAkB,IAAIyE,kBAAiB,SAASC,GACnBA,EAAUnJ,MAAK,SAACoJ,OAnCdN,EAoCnBO,GAAU,QAEQ,eAAlBD,EAASzL,KACT0L,EAAUlP,EAAOiP,EAASE,QAEH,cAAlBF,EAASzL,OACd0L,EAAUR,EAAmBO,EAASG,cA1CnBT,EA0CwDM,EAASI,aAzCrF/V,MAAMG,MAAM,KAAMkV,GAAe9I,MAAK,SAAAzI,OACnCkS,EAA8B,IAAlBlS,EAAKyR,SACjBU,EAAYD,GAA+C,QAAtClS,EAAK0C,aAAa,gBACvC0P,EAAYF,GAA+C,QAAtClS,EAAK0C,aAAa,gBACvCoP,EAAYM,KAEdA,GAAaD,EAAW,KAClB9D,EAAarO,EAAK0C,aAAa,sBAC/B2P,EAAa5W,EAAS+D,YAAYuE,6CAAsCsK,SAE1E+D,IACAvC,EAAcpU,EAAS+D,aACvBsN,EAAcC,IAAM,IAGpBsF,GACAA,EAAW/D,WAAWC,YAAY8D,UAInCP,OAwBAA,MAIPjF,EAAQpR,OAIA6W,QAAQnV,SAASwR,gBAAiB,CAC9C4D,YAAiB,EACjBC,gBAAiB,CAAC,WAAY,QAC9BC,WAAiB,EACjBC,SAAiB,KASzB,SAASzE,EAAiBxS,OAAUkX,yDAAQ,IACxCC,aAAaxF,GACbA,EAAgBxO,YAAW,WACvBnD,EAASqS,YAAc,KACvBjB,EAAQpR,KACTkX,GASP,SAASjC,EAAalR,OACZqT,EAAoB,CACtB,iBACA,sBACA,0BACFlT,QAAO,SAAAiH,UAAQmI,iBAAiB5R,SAAS0G,MAAM+C,MAAO,MAEpDiM,EAAmB,SACbC,EAAgBtT,EAAYuT,qBAAqB,KACjDC,EAAgB,GAIbzV,EAAI,EAAG0V,EAAMH,EAASvX,OAAQgC,EAAI0V,EAAK1V,IAAK,KAC3CyC,EAAgB8S,EAASvV,GAGT,SAFAwR,iBAAiB/O,GAAM6S,KAGzC7S,EAAKiP,MAAM4D,IARG,gCASdG,EAAcnR,KAAK7B,IAKtB7C,SAAS0G,KAAKqP,iBAGd,IAAI3V,EAAI,EAAG0V,EAAMD,EAAczX,OAAQgC,EAAI0V,EAAK1V,IAAK,KAChD4V,EAAYH,EAAczV,GAAG0R,MAEnCkE,EAAUN,GAAqBM,EAAUN,GAAmBlR,QApB1C,gCAoB8D,MAY5F,SAAS6N,EAAmB/S,EAASwE,UACjBxE,EAEXkF,QAAQpC,EAAM+M,YAAa,IAE3BjK,MAAM9C,EAAMkN,UAAY,IAErBpP,SAAQ,SAAA+V,OACN7Q,EAAS6Q,EAAOzR,QAAQpC,EAAMkN,QAAS,MACvCjK,EAASF,EAAWC,EAAQtB,GAElCxE,EAAUA,EAAQkF,QAAQyR,EAAQA,EAAOzR,QAAQY,EAAQC,OAGtD/F,EASX,SAASyR,QAAYmF,yDAAS,GACpBC,EAAmB,eAElBlI,OAAOwD,KAAKyE,GAAQE,QAAO,SAAC5K,EAAK3B,UAGpC2B,EAFY2K,EAAiBnR,KAAK6E,GAASA,cAAaA,EAAMrF,QAAQ,MAAO,MAElE0R,EAAOrM,GAEX2B,IACR,IAUP,SAASrG,EAAWhF,OAAK+F,yDAAOpF,SAASR,KAC/B6F,EAAInG,SAASoG,eAAeC,mBAAmB,IAC/CC,EAAIH,EAAElG,cAAc,QACpBsG,EAAIJ,EAAElG,cAAc,YAE1BkG,EAAEK,KAAKC,YAAYH,GACnBH,EAAEO,KAAKD,YAAYF,GACnBD,EAAEhG,KAAO4F,EACTK,EAAEjG,KAAOH,EAEFoG,EAAEjG,KAQb,SAASoQ,WACEpC,IAAc5N,OAAO2V,aAAe,IAAIC,IAAM5V,OAAO2V,YAAYC,OAAQ,IAAIC,MAAOC,UAG/F,SAAS9D,EAAcrQ,GACAtD,MAAMG,MAAM,KAAMmD,EAAYO,iBAAiB,+CAEvD1C,SAAQ,SAAA2C,UAAQA,EAAKxC,aAAa,eAAgB,cA5PjEqP,EAAQ+G,MAAQ,eAwBP,IAAMhN,KAtBXgF,EAASE,IAAM,EACfF,EAASC,MAAQ,EAGjBoB,GAAmB,EAGfC,IACAA,EAAgBc,aAChBd,EAAkB,MAItBC,EAAsB,EAGtBC,EAAgB,KAGhBC,GAAmB,EAGAP,EACfA,EAAclG,GAAQ"}